import json
import random
import logging
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from data_manager import load_player_data, save_player_data, add_click_to_data, update_user_name, add_user
from games.coinflip import show_games_keyboard, start_coinflip, process_coinflip_choice
from games.mines import start_mines, process_mines_field, process_mines_option, process_mines_text, process_mines_choice
from config import CONFIG
from utils import format_user_tag

# Dictionaries to track waiting states outside of game sessions
awaiting_name_change = {}
awaiting_bet = {}

def is_group_chat(peer_id):
    return peer_id >= 2000000000

def handle_message(event, player_data, vk):
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    raw_text = event.obj.message.get('text', '')
    message_text = raw_text.replace("\xa0", " ").replace("\u200b", "").replace("\uFEFF", "").strip()
    user_id = event.obj.message.get('from_id')
    peer_id = event.obj.message.get('peer_id')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {tag}: raw='{raw_text}' -> processed='{message_text}' (repr: {repr(message_text)})")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏
    if str(user_id) in awaiting_name_change:
        if message_text.lower() == "–æ—Ç–º–µ–Ω–∞":
            vk.messages.send(
                peer_id=peer_id,
                message=f"{tag}\n–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                random_id=random.randint(1, 1000)
            )
        else:
            update_user_name(user_id, message_text, player_data)
            vk.messages.send(
                peer_id=peer_id,
                message=f"{tag}\n–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message_text}.",
                random_id=random.randint(1, 1000)
            )
        del awaiting_name_change[str(user_id)]
        add_click_to_data(user_id, "change_name", player_data)
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∏–≥—Ä—ã
    if str(user_id) in awaiting_bet:
        try:
            logging.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {tag}: '{message_text}'")
            amount = int(message_text)
            game_type = awaiting_bet[str(user_id)]
            del awaiting_bet[str(user_id)]
            if game_type == "coinflip":
                start_coinflip(user_id, amount, player_data, vk, peer_id)
            elif game_type == "mines":
                start_mines(user_id, amount, player_data, vk, peer_id)
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏ '{message_text}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {tag}: {e}")
            vk.messages.send(
                peer_id=peer_id,
                message=f"{tag}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.",
                random_id=random.randint(1, 1000)
            )
        return

    # –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    if is_group_chat(peer_id):
        lower_text = message_text.lower()
        if lower_text == "–Ω–∞—á–∞—Ç—å":
            if bot_has_admin_permissions(peer_id, vk):
                start_games_in_chat(vk, peer_id)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message=f"{tag}\n–ë–æ—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä. –î–∞–π—Ç–µ –±–æ—Ç—É –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.",
                    random_id=random.randint(1, 1000)
                )
            return
        elif lower_text == "–∏–≥—Ä—ã":
            if bot_has_admin_permissions(peer_id, vk):
                start_games_in_chat(vk, peer_id)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message=f"{tag}\n–ë–æ—Ç —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä. –î–∞–π—Ç–µ –±–æ—Ç—É –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.",
                    random_id=random.randint(1, 1000)
                )
            return
        elif lower_text not in ["–∏–≥—Ä—ã", "–±–æ–Ω—É—Å"]:
            return
    else:
        # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        lower_text = message_text.lower()
        if lower_text in ["–Ω–∞—á–∞—Ç—å", "–º–µ–Ω—é"]:
            start_game(user_id, player_data, vk, peer_id)
        elif lower_text == "–∫–ª–∏–∫–∏":
            farm_clicks(user_id, player_data, vk, peer_id)
        elif lower_text == "–±–∞–ª–∞–Ω—Å":
            show_balance(user_id, player_data, vk, peer_id)
        elif lower_text == "–ø—Ä–æ—Ñ–∏–ª—å":
            show_profile(user_id, player_data, vk, peer_id)
        elif lower_text == "—Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤":
            show_top_balances(user_id, player_data, vk, peer_id)
        elif lower_text == "—Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤":
            show_top_miners(user_id, player_data, vk, peer_id)
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ú–∏–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —è—á–µ–π–∫–∏ –∏–ª–∏ –º–∏–Ω
            if process_mines_text(user_id, message_text, player_data, vk, peer_id):
                return
            else:
                return
    add_click_to_data(user_id, lower_text, player_data)

def start_game(user_id, player_data, vk, peer_id):
    if str(user_id) not in player_data:
        add_user(user_id, player_data)
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    keyboard = VkKeyboard(one_time=False)
    if not is_group_chat(peer_id):
        keyboard.add_callback_button("Glitch‚ö°", color=VkKeyboardColor.PRIMARY, payload={"command": "get_glitch"})
        keyboard.add_line()
        keyboard.add_callback_button("–ò–≥—Ä–∞—Ç—åüé∞", color=VkKeyboardColor.PRIMARY, payload={"command": "–∏–≥—Ä—ã"})
        keyboard.add_line()
        keyboard.add_callback_button("–ü—Ä–æ—Ñ–∏–ª—åüë§", color=VkKeyboardColor.SECONDARY, payload={"command": "–ø—Ä–æ—Ñ–∏–ª—å"})
        keyboard.add_callback_button("–†–µ—Ñ–∫–∞ü§ù", color=VkKeyboardColor.SECONDARY, payload={"command": "—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞"})
        keyboard.add_line()
        keyboard.add_callback_button("–¢–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤üí∏", color=VkKeyboardColor.POSITIVE, payload={"command": "—Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤"})
        keyboard.add_callback_button("–¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤‚õèÔ∏è", color=VkKeyboardColor.POSITIVE, payload={"command": "—Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤"})
        menu_keyboard = keyboard.get_keyboard()
    else:
        menu_keyboard = None
    vk.messages.send(
        peer_id=peer_id,
        message=f"{tag}\n–ü—Ä–∏–≤–µ—Ç! –Ø, –≤–æ–∑–º–æ–∂–Ω–æ, –±–∏—Ç–∫–æ–∏–Ω, –∞ –≤–æ–∑–º–æ–∂–Ω–æ ‚Äì —Ö–æ–º—è–∫. –§–∞—Ä–º–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç ‚Äì —ç—Ç–æ —Ç–≤–æ—ë –¥–µ–ª–æ. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?\n\n"
                "–í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é, –∞ –≤ –∏–≥—Ä–æ–≤–æ–º —á–∞—Ç–µ ‚Äì —Ç–æ–ª—å–∫–æ –∏–≥—Ä—ã –∏ –±–æ–Ω—É—Å.",
        keyboard=menu_keyboard,
        random_id=random.randint(1, 1000)
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} {tag} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

def farm_clicks(user_id, player_data, vk, peer_id):
    if str(user_id) not in player_data:
        return
    earned_glitch = random.randint(5, 17)
    player_data[str(user_id)]["balance"] += earned_glitch
    save_player_data(player_data)
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {tag}: –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ {earned_glitch} Glitch‚ö°. –ë–∞–ª–∞–Ω—Å: {player_data[str(user_id)]['balance']}")
    vk.messages.send(
        peer_id=peer_id,
        message=f"{tag}\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earned_glitch} Glitch‚ö°! –í–∞—à –±–∞–ª–∞–Ω—Å: {player_data[str(user_id)]['balance']} Glitch‚ö°.",
        random_id=random.randint(1, 1000)
    )

def show_balance(user_id, player_data, vk, peer_id):
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    if str(user_id) in player_data:
        balance = player_data[str(user_id)]["balance"]
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} Glitch‚ö°.",
            random_id=random.randint(1, 1000)
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            random_id=random.randint(1, 1000)
        )

def show_profile(user_id, player_data, vk, peer_id):
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    if str(user_id) in player_data:
        profile = (f"{tag}\n–ü—Ä–æ—Ñ–∏–ª—å:\n–ë–∞–ª–∞–Ω—Å: {player_data[str(user_id)]['balance']} Glitch‚ö°\n"
                   f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {player_data[str(user_id)]['start_date']}\n"
                   f"–ò–º—è: {player_data[str(user_id)]['name']}\n–ù–∞–∂–º–∏—Ç–µ [–°–º–µ–Ω–∏—Ç—å –∏–º—è] –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        keyboard = VkKeyboard(inline=True)
        keyboard.add_callback_button("–°–º–µ–Ω–∏—Ç—å –∏–º—è", color=VkKeyboardColor.PRIMARY, payload={"command": "change_name"})
        menu = keyboard.get_keyboard()
        vk.messages.send(
            peer_id=peer_id,
            message=profile,
            keyboard=menu,
            random_id=random.randint(1, 1000)
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
            random_id=random.randint(1, 1000)
        )

def show_top_balances(user_id, player_data, vk, peer_id):
    top = sorted(player_data.items(), key=lambda x: x[1].get("balance", 0), reverse=True)[:5]
    message = "–¢–æ–ø 5 –±–∞–ª–∞–Ω—Å–æ–≤:\n"
    for i, (uid, data) in enumerate(top, 1):
        tag_user = f"[vk.com/id{uid}|{data.get('name', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}')}]"
        message += f"{i}. {tag_user}: {data.get('balance', 0)} Glitch‚ö°\n"
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        random_id=random.randint(1, 1000)
    )

def show_top_miners(user_id, player_data, vk, peer_id):
    message = "–¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!"
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        random_id=random.randint(1, 1000)
    )

def bot_has_admin_permissions(peer_id, vk):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ.
    return True

def start_games_in_chat(vk, peer_id):
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_callback_button("–û—Ä–µ–ª-–†–µ—à–∫–∞", color=VkKeyboardColor.PRIMARY, payload={"command": "coinflip"})
    keyboard.add_callback_button("–ú–∏–Ω—ã", color=VkKeyboardColor.PRIMARY, payload={"command": "mines"})
    vk.messages.send(
        peer_id=peer_id,
        message="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        keyboard=keyboard.get_keyboard(),
        random_id=random.randint(1, 1000)
    )

def handle_callback(event, player_data, vk):
    user_id = event.obj.user_id
    payload = event.obj.payload
    peer_id = event.obj.peer_id
    command = payload.get("command")
    tag = format_user_tag(user_id, player_data.get(str(user_id), {}))
    
    if command == "get_glitch":
        farm_clicks(user_id, player_data, vk, peer_id)
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": f"{tag} –í—ã –ø–æ–ª—É—á–∏–ª–∏ Glitch‚ö°!"})
        )
    elif command == "–±–∞–ª–∞–Ω—Å":
        show_balance(user_id, player_data, vk, peer_id)
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": f"{tag} –í–∞—à –±–∞–ª–∞–Ω—Å!"})
        )
    elif command == "–ø—Ä–æ—Ñ–∏–ª—å":
        show_profile(user_id, player_data, vk, peer_id)
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": f"{tag} –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å!"})
        )
    elif command == "—Ç–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤":
        show_top_balances(user_id, player_data, vk, peer_id)
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": f"{tag} –¢–æ–ø –±–∞–ª–∞–Ω—Å–æ–≤!"})
        )
    elif command == "—Ç–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤":
        show_top_miners(user_id, player_data, vk, peer_id)
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": f"{tag} –¢–æ–ø –º–∞–π–Ω–µ—Ä–æ–≤!"})
        )
    elif command == "change_name":
        awaiting_name_change[str(user_id)] = True
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–∫–∞–∑–∞.",
            random_id=random.randint(1, 1000)
        )
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": "–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏"})
        )
    elif command == "coinflip":
        awaiting_bet[str(user_id)] = "coinflip"
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–ª—è '–û—Ä–µ–ª-–†–µ—à–∫–∞':",
            random_id=random.randint(1, 1000)
        )
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": "–°—Ç–∞–≤–∫–∞ –¥–ª—è –û—Ä–µ–ª-–†–µ—à–∫–∞"})
        )
    elif command == "mines":
        awaiting_bet[str(user_id)] = "mines"
        vk.messages.send(
            peer_id=peer_id,
            message=f"{tag}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã '–ú–∏–Ω—ã':",
            random_id=random.randint(1, 1000)
        )
        vk.messages.sendMessageEventAnswer(
            event_id=event.obj.event_id,
            user_id=user_id,
            peer_id=peer_id,
            event_data=json.dumps({"type": "show_snackbar", "text": "–°—Ç–∞–≤–∫–∞ –¥–ª—è –ú–∏–Ω—ã"})
        )
    elif command == "mines_field":
        size = payload.get("size")
        from games.mines import process_mines_field
        process_mines_field(event, user_id, size, player_data, vk, peer_id)
    elif command == "mines_option":
        option = payload.get("option")
        from games.mines import process_mines_option
        process_mines_option(event, user_id, option, player_data, vk, peer_id)
    else:
        if process_coinflip_choice(user_id, payload, player_data, vk, peer_id):
            return
        elif process_mines_choice(user_id, payload, player_data, vk, peer_id):
            return
        else:
            logging.debug(f"handle_callback: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {tag}.")